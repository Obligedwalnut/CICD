# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# workflow의 제목
name: Node.js CI

# Event 설정
on:	
  push:		
    branches: [ "main" ]	
  pull_request:
    branches: [ "main" ]

# workflow가 동작할 행위를 설정해준다.
# jobs를 설정해주는 것
jobs:	
  build:
		  runs-on: ubuntu-latest

    strategy:		
      matrix:			
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

		# 단계 정의
    steps:
			# action 정의
			# checkout@v3 : Repo에 있는 Code를 Runner로 가져온다.
    - uses: actions/checkout@v3
			# 이름 정의해주기
    - name: Use Node.js ${{ matrix.node-version }}
			# node 설치하기
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
			# run 으로 script 실행하기
			# package.json dependency 설치
    - run: npm ci

			# S3로 보낼 압축 파일 생성
    - name: zip file
			# zip 으로 포장
			# CI.zip 압축 파일 이름 지정
			# 나머지 뒷단 : 압축파일에 넣을 코드 파일 혹은 폴더 지정
			# workflow와 동일한 위치의 폴더와 파일을 넣어준다.
      run: zip -r CI.zip ./app.js ./config ./migrations ./models ./routes ./scripts ./appspec.yml ./package.json ./package-lock.json

			# AWS 인증하기
    - name: AWS configure credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
				# 엑세스 키 입력
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
				# 엑세스 시크릿 키 입력
        aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
				# 지역 설정 : 서울
        aws-region: ap-northeast-2

			# S3로 업로드하기
    - name: upload to S3
			# --region = 지역 설정
			# ./CI.zip = 보낼 압축 파일 작성
			# s3://(S3 Bucket 이름)/(하위 폴더 작성)/
      run: aws s3 cp --region ap-northeast-2 ./CI.zip s3://obligedwalnut-cicd-bucket/deploy/

			# codeDeploy 실행
    - name: deploy with AWS codeDeploy
      run: aws deploy create-deployment
					#application-name = deployment 애플리케이션 이름 작성
        --application-name deployment
					# deployment-config-name Group의 배포 구성 작성
					# CodeDeployDefault.OneAtATime
        --deployment-config-name CodeDeployDefault.OneAtATime
					# deployment-group-name : 배포 그룹 이름 작성
        --deployment-group-name my-deployment
					# s3-location bucket=(S3버킷 이름 작성)
					# bundleType=(배포할 파일의 형태 작성), 우리는 zip으로 압축했으니 zip을 써준다
					# key = (S3 하위폴더)/(배포할 파일 작성)
        --s3-location bucket=obligedwalnut-cicd-bucket,bundleType=zip,key=deploy/CI.zip
